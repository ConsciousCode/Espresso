var Node = import "./nodes";
var Token = import "./token";
var Scanner = import "./scanner";

#(
 * Unary operator precedences.
)#
var UNARYOPS = object(
	"+": 0x40, '-': 0x40,
	"~": 0x41, "!": 0x41, 'not': 0x41,
	"++": 0x42, "--": 0x42,

	"::": 0x40, "@": 0x42
);

#(
 * Binary operation precedences.
)#
var BINARYOPS = object(
    # Technical
    ';': 0x00,
	',': 0x01,
	'=': 0x01,

    # Boolean
    '||': 0x10, 'or': 0x10,
	'&&': 0x11, 'and': 0x11,

    # Comparisons
    'in': 0x20, 'is': 0x20,
	"<": 0x20, "<=": 0x20,
	">": 0x20, ">=": 0x20,
	"==": 0x20, "!=": 0x20,

    # Arithmetic
    '+': 0x30, '-': 0x30,
	'*': 0x31, '/': 0x31, '%': 0x31,

    # Referencing
    "::": 0xa0, '.': 0xa1
);

#(
 * Operations that are right- associating
)#
var RIGHTOPS = [';'];

var COMPACT = BINARYOPS[';'];

export proto Parser {
	let new(code) {
		this.scanner = new Scanner(code);
	}

	let match(type, value) {
		var tok = this.nextToken();
		if (tok.type == type and tok.value == value) then {
			this.consumeToken();
			return true;
		}
		return false;
	}

	let matchPunctuator(value) {
		return this.match(Token.Punctuator, value);
	}

	let matchKeyword(value) {
		return this.match(Token.Keyword, value);
	}

	let parseFunction() {
		var name, body;

		var tok = this.nextToken();
		if (tok.type == Token.Identifier) then {
			name = tok.value;
			tok = this.consumeToken();
		}

		if (tok.value != "(") {
			fail "Expected (";
		}
		tok = this.consumeToken();

		var params = new List(
			exec while(tok.value and tok.value != ")") {
			if (tok.type == Token.Identifier) then {
				yield new Node.Identifier(tok.value);

				tok = this.consumeToken();
				if (tok.value != ")") {
					this.expectPunctuator(",");
				}
			}
		}
		);

	return new Node.Function(name, params, body);
}

let parseIf() {
	var test = this.parseExpression(COMPACT);
	if (this.nextToken().value == "then") then {
		this.consumeToken();
	}

	var body = this.parseExpression(COMPACT), alt = nil;
	if (this.matchKeyword('else')) then {
		this.nextToken();
		alt = this.parseExpression(COMPACT);
	}

	return new Node.IfExpression(test, body, alt);
}

let parseDo() {
	var body = this.parseExpression(), loop = nil;

	if (this.matchKeyword('while')) then {
		this.consumeToken();

		loop = this.parseWhileStatement();
	}

	return new Node.DoExpression(body, loop);
}

let parseElseable() {
# We want to exclude semicolon chaining
var
	head = this.parseExpression(COMPACT),
	body = this.parseExpression(COMPACT),
	alt = nil;

if (this.matchKeyword('else')) then {
	this.consumeToken();
	alt = this.parseExpression(0);
}

return { head: head, body: body, alt: alt };
	}
	
let parseWhileStatement() {
	use var { head, body, alt } = this.parseElseable();
	return new Node.WhileStatement(head, body, alt);
}

let parseForStatement() {
	use var { head, body, alt } = this.parseElseable();
	return new Node.ForStatement(head, body, alt);
}

let parseReturnStatement() {
	return new Node.ReturnStatement(this.parseExpression(0));
}

let parseWithStatement() {
	return new Node.WithStatement(
		this.parseExpression(COMPACT),
		this.parseExpression(COMPACT)
	);
}

let nextToken() {
	if (this.lookahead) then {
		return this.lookahead;
	}

	return this.consumeToken();
}

let nextIdentifier() {
	var tok = this.nextToken();
	if (tok.type == Token.Identifier) then {
		return tok;
	}

	return nil;
}

let consumeToken() {
	return this.lookahead = this.scanner.lex();
}

let parseAtom() {
	var
		start = this.scanner.index,
		tok = this.nextToken(), val, op;

	this.consumeToken();

		case(tok.type) {
	when Token.BooleanLiteral do
		return new Node.Literal(
			tok.value == 'true', tok.value
		);
			when Token.NilLiteral do
		return new Node.Literal(nil);
			when Token.NumericLiteral do
		return new Node.Literal(tok.value);
			when Token.StringLiteral do
		return new Node.Literal(tok.value);

			when Token.Keyword do {
				case(tok.value) {
			when 'if' do
				return this.parseIfStatement();
					when 'for' do
				return this.parseForStatement();
					when 'do' do
				return this.parseDoBlock();
					when 'let' do
				return this.parseFunctionExpression();
					when 'return' do
				return new Node.ReturnStatement(
					this.parseExpression(COMPACT)
				);
					when 'yield' do {
				var delegate = false;
				if (this.matchKeyword('from')) {
					delegate = true;
					this.consumeToken();
				}

				return new Node.YieldExpression(
					this.parseExpression(COMPACT), delegate
				);
			}
					when 'fail' do
				return new Node.FailStatement(
					this.parseExpression(COMPACT)
				);
					when 'with' do
				return this.parseWithStatement();
				}
	}
			when Token.Punctuator {
		# Ignore[and { for now
				if(tok.value == '(') {
				if (this.matchPunctuator(")")) {
					var stop = this.scanner.index;

					this.consumeToken();
					return new Node.Literal(
						nil, this.scanner.source.substring(
							start, stop
						)
					);
				}
				else {
					val = this.parseExpression(0);
					this.expectPunctuator(")");
					return val;
				}
			}

			continue;
		}

		when Token.Identifier {
			op = UNARYOPS.?[tok.value];
			if (op) {
				return new Node.UnaryExpression(
					tok.value, this.parseExpression(op)
				);
			}
			else if (tok.type == Token.Identifier) {
				return new Node.Identifier(tok.value);
			}

			continue;
		}
			
			else {
			fail tok;
		}
	}
}

let nextBinaryOperator(minprec) {
	var tok = this.nextToken(), op = BINARYOPS.?[tok.value];
		
	if (op is nil or op < minprec) {
		return nil;
	}

	this.consumeToken();
	return {
		token: tok, prec: op,
		leftassoc: tok.value not in RIGHTOPS
	};
}

let parseExpression(minprec) {
	var lhs = this.parseAtom(), op;

	while (op = this.nextBinaryOperator(minprec)) {
		lhs = new Node.BinaryExpression(op.token.value,
			lhs, this.parseExpression(op.prec + op.leftassoc)
		);
	}

	return lhs;
}

let parseScript() {
# Consume the default EOF token
this.consumeToken();
return this.parseExpression(0);
	}
};
