export const Syntax = {
	AssignmentExpression: 'AssignmentExpression',
	AssignmentPattern: 'AssignmentPattern',
	ArrayExpression: 'ArrayExpression',
	ArrayPattern: 'ArrayPattern',
	ArrowFunctionExpression: 'ArrowFunctionExpression',
	AwaitExpression: 'AwaitExpression',
	BlockExpression: 'BlockExpression',
	BinaryExpression: 'BinaryExpression',
	BreakExpression: 'BreakExpression',
	CallExpression: 'CallExpression',
	CatchClause: 'CatchClause',
	ClassBody: 'ClassBody',
	ClassDeclaration: 'ClassDeclaration',
	ClassExpression: 'ClassExpression',
	ConditionalExpression: 'ConditionalExpression',
	ContinueExpression: 'ContinueExpression',
	DoWhileExpression: 'DoWhileExpression',
	DoBlock: "DoBlock",
	DebuggerExpression: 'DebuggerExpression',
	EmptyExpression: 'EmptyExpression',
	ExportAllDeclaration: 'ExportAllDeclaration',
	ExportDefaultDeclaration: 'ExportDefaultDeclaration',
	ExportNamedDeclaration: 'ExportNamedDeclaration',
	ExportSpecifier: 'ExportSpecifier',
	ExpressionExpression: 'ExpressionExpression',
	ForExpression: 'ForExpression',
	ForOfExpression: 'ForOfExpression',
	ForInExpression: 'ForInExpression',
	FunctionDeclaration: 'FunctionDeclaration',
	FunctionExpression: 'FunctionExpression',
	Identifier: 'Identifier',
	IfExpression: 'IfExpression',
	Import: 'Import',
	ImportDeclaration: 'ImportDeclaration',
	ImportDefaultSpecifier: 'ImportDefaultSpecifier',
	ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
	ImportSpecifier: 'ImportSpecifier',
	Literal: 'Literal',
	LabeledExpression: 'LabeledExpression',
	LogicalExpression: 'LogicalExpression',
	MemberExpression: 'MemberExpression',
	MetaProperty: 'MetaProperty',
	MethodDefinition: 'MethodDefinition',
	NewExpression: 'NewExpression',
	ObjectExpression: 'ObjectExpression',
	ObjectPattern: 'ObjectPattern',
	Program: 'Program',
	Property: 'Property',
	Prototype: "Prototype",
	RestElement: 'RestElement',
	ReturnExpression: 'ReturnExpression',
	SequenceExpression: 'SequenceExpression',
	SpreadElement: 'SpreadElement',
	Super: 'Super',
	SwitchCase: 'SwitchCase',
	SwitchExpression: 'SwitchExpression',
	TaggedTemplateExpression: 'TaggedTemplateExpression',
	TemplateElement: 'TemplateElement',
	TemplateLiteral: 'TemplateLiteral',
	ThisExpression: 'ThisExpression',
	FailExpression: 'FailExpression',
	TryExpression: 'TryExpression',
	UnaryExpression: 'UnaryExpression',
	UpdateExpression: 'UpdateExpression',
	VariableDeclaration: 'VariableDeclaration',
	VariableDeclarator: 'VariableDeclarator',
	WhileExpression: 'WhileExpression',
	WithExpression: 'WithExpression',
	YieldExpression: 'YieldExpression'
};
